#include <iostream>
#include <queue>

using namespace std;

class node{
    public:
    int val;
    node* left;
    node* right;
    node(int x){
        this->val=x;
        this->left=NULL;
        this->right=NULL;
    }
};

void build_from_level_order(node * & root){
    queue<node*> q;
    cout<<"Enter the data for root"<<endl;
    int data;
    cin>>data;
    root= new node(data);
    q.push(root);
    
    while(!q.empty()){
        node* temp= q.front();
        q.pop();
        
        cout<<"Enter the data for left child of "<<temp->val<<endl;
        int leftdata;
        cin>>leftdata;
        if(leftdata!=-1){
            temp->left=new node(leftdata);
            q.push(temp->left);
        }
        
        cout<<"Enter the data for right child of "<<temp->val<<endl;
        int rightdata;
        cin>>rightdata;
        if(rightdata!=-1){
            temp->right=new node(rightdata);
            q.push(temp->right);
        }
    }
}

void level_order_Transversal(node *root){
    queue<node *>q;         //create queue to store node address in order
    q.push(root);           // Insert first element
    q.push(NULL);           // Seprator is added to distinguish level

    node* temp;
    while(!q.empty()){
       
        temp = q.front();
        q.pop();
        
            if(temp==NULL){            // Seprator is added to distinguish level
             cout<<endl;
             
             if(!q.empty()){        // Seprator is added to distinguish level if not empty
                q.push(NULL);
                 
                }
            }
            
            
            else{
                cout<<temp->val<<" ";

                if(temp->left){
                q.push(temp->left);
                }
                
                if(temp->right){
                q.push(temp->right);
                }
            }
   
    }
}


int main() {
    node* root;
    build_from_level_order(root);
    level_order_Transversal(root);

    return 0;
}
