// Online C++ compiler to run C++ program online
#include <iostream>
#include <queue>

using namespace std;

class node{
    public:
    int val;
    node* left;
    node* right;
    node(int x){
        this->val=x;
        this->left=NULL;
        this->right=NULL;
    }
};

node* createTree(node *root){
    cout<<"Enter the value ";
    int data;
    cin>>data;
    root = new node(data);
    
    if(data == -1){
        return NULL;}
    cout<<"Enter the value for left of "<<data<<endl;;
    root->left=createTree(root->left);
    cout<<"Enter the value for right of "<<data<<endl;
        root->right=createTree(root->right);
        
        return root;
}

void level_order_Transversal(node *root){
    queue<node *>q;         //create queue to store node address in order
    q.push(root);           // Insert first element
    q.push(NULL);           // Seprator is added to distinguish level

    node* temp;
    while(!q.empty()){
       
        temp = q.front();
        q.pop();
        
            if(temp==NULL){            // Seprator is added to distinguish level
             cout<<endl;
             
             if(!q.empty()){        // Seprator is added to distinguish level if not empty
                q.push(NULL);
                 
                }
            }
            
            
            else{
                cout<<temp->val<<" ";

                if(temp->left){
                q.push(temp->left);
                }
                
                if(temp->right){
                q.push(temp->right);
                }
            }
   
    }
}

void Inorder(node* root){
    //left node right
    if(root==NULL)
    {return ;}
    Inorder(root->left);
    cout<<root->val<<" ";
    Inorder(root->right);
}

void Preorder(node* root){
    //node left right
    if(root==NULL)
    {return ;}
    
    cout<<root->val<<" ";
    Preorder(root->left);
    Preorder(root->right);
}

void Postorder(node* root){
        // left right node

    if(root==NULL)
    {return ;}
    Postorder(root->left);
    Postorder(root->right);
    cout<<root->val<<" ";
}

int main() {
node * root;
root = createTree(root);
level_order_Transversal(root);
Inorder(root);

    return 0;
}